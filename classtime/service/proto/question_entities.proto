syntax = "proto3";

package classtime.service.question.api;

import "common_messages.proto";
import "entity_store_messages.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "QuestionEntitiesProto";
option java_package = "classtime.service.question.api";

enum QuestionKind {
  BOOLEAN = 0;
  CATEGORIZER = 1;
  CATEGORIZER_MULTIPLE = 2;
  CLOZE = 3;
  GAP = 4;
  HOTSPOT = 5;
  MULTIPLE_CHOICE = 6;
  SINGLE_CHOICE = 7;
  SORTER = 8;
  TEXT = 9;
  ESSAY = 10;
}

message QuestionImage {
  string cloudinary_ref = 1;
  string source = 2;
  bool is_protected = 3;
  classtime.entity.EntityRef owner = 4;
}

message QuestionAudio {
  string cloudinary_ref = 1;
}

message QuestionInfo {
  reserved 3;
  string title = 1;
  QuestionKind kind = 2;
  string content_draftjs = 14;
  string provider = 4;
  classtime.service.common.GradingPoint max_points = 5; // was: 'weight'
  string video_url = 6;
  bool is_onboarding = 7;
  string onboarding_id = 8;
  bool is_poll = 9;
  string license = 10;
  repeated string tags = 11; // tag names
  QuestionImage image = 12;
  QuestionAudio audio = 13;
}

// Question Types Messages

message BooleanQuestion {}

// Both Categorizer and CategorizerMultiple
message CategorizerQuestion {
  message CategorizerItem {
    reserved 1;
    string content_draftjs = 3;
    string django_uuid = 2;
  }
  message CategorizerCategory {
    reserved 1;
    string content_draftjs = 3;
    string django_uuid = 2;
  }

  repeated CategorizerItem items = 1;
  repeated CategorizerCategory categories = 2;
}

message HighlightTextQuestion {
  message ClozeChoice {
    string content = 1;
    string django_uuid = 2;
  }
  message Cloze {
    repeated ClozeChoice cloze_choice = 1;
    string django_uuid = 2;
  }

  string content = 1;
  repeated Cloze clozes = 2;
}

message HotspotQuestion {
  bool require_all = 1;
  string cloudinary_image_ref = 2;
  string image_alt = 3;
  int32 width = 4;
  int32 height = 5;
}

message Choice {
  reserved 1;
  string content_draftjs = 4;
  string cloudinary_image_ref = 2;
  string django_uuid = 3;
}

// Both Single and Multiple
message ChoiceQuestion {
  repeated Choice choices = 1;
}

message SorterQuestion {
  // Choices in correct order.
  repeated Choice choices = 1;
}

message TextQuestion {}

message FillInTheGapQuestion {
  enum Type {
    BLANK = 0;
    CHOICES = 1;
  }
  message Choice {
    string content = 1;
  }
  message Gap {
    Type type = 1;
    string gap_local_id = 2;
    repeated Choice choices = 3;
  }

  string text = 1;
  repeated Gap gaps = 2;
}

message EssayQuestion {}

// Answer and Solution Types Messages

message BooleanAnswer {
  bool is_true = 1;
}

message BooleanSolution {
  BooleanAnswer correct_answer = 1;
}

// Both Categorizer and CategorizerMultiple
message CategorizerAnswer {
  message SelectedCategories {
    repeated int32 category_indices = 1;
  }
  // For each item, the selected categories in the order as the items are defined in the question.
  repeated SelectedCategories selected_categories = 1;
}

// Both Categorizer and CategorizerMultiple
message CategorizerSolution {
  CategorizerAnswer correct_answer = 1;
}

message HighlightTextAnswer {
  message SelectedChoices {
    repeated int32 choice_indices = 1;
  }

  // One entry for each cloze in the same order as in the question.
  repeated SelectedChoices selected_choices = 1;
}

message HighlightTextSolution {
  HighlightTextAnswer correct_answer = 1;
}

message HotspotPoint {
  reserved 1, 2;
  double x = 3;
  double y = 4;
}

enum ShapeKind {
  POLYGON = 0;
}
message Shape {
  ShapeKind kind = 1;
  repeated HotspotPoint points = 2;
}

message HotspotAnswer {
  repeated HotspotPoint points = 1;
}

message HotspotSolution {
  repeated Shape shapes = 1;
}

message SingleChoiceAnswer {
  // Index of the selected choice as ordered in the question.
  int32 selected_choice = 1;
}

message SingleChoiceSolution {
  SingleChoiceAnswer correct_answer = 1;
}

message MultipleChoiceAnswer {
  // Indices of the selected choices as ordered in the question.
  repeated int32 selected_choices = 1;
}

message MultipleChoiceSolution {
  MultipleChoiceAnswer correct_answer = 1;
}

message SorterAnswer {
  // Indices of the sorted choices.
  repeated int32 sorted_choices = 1;
  // TODO(https://app.asana.com/1/29774015570538/project/1203796373635132/task/1211783847714839?focus=true): Remove after migration.
  repeated classtime.entity.EntityRef sorted_choices_ref = 2;
}

message SorterSolution {
  // The choices as listed in the question is the correct order, so no need to specify anything.
  // TODO(https://app.asana.com/1/29774015570538/project/1203796373635132/task/1211783847714839?focus=true): Remove after migration.
  repeated classtime.entity.EntityRef sorted_choices_ref = 1;
}

message TextAnswer {
  string content = 1;
}

message TextSolution {}

message FillInTheGapAnswer {
  message Gap {
    oneof answer {
      string content = 1;
      int32 choice_index = 2;
    }
  }

  repeated Gap gaps = 1;
}

message FillInTheGapSolution {
  FillInTheGapAnswer correct_answer = 1;
}

message EssayAnswer {
  string content = 1;
  string selection = 2;
}

message EssaySolution {}

message ContextMaterial {
  string content = 1;
}

// Entity nested in Session
message Question {
  reserved 3, 22;
  QuestionInfo question_info = 1;
  classtime.entity.EntityRef derived_from_question_ref = 2; // UUID reference to django model 'library.Question'
  string explanation_draftjs = 32;
  ContextMaterial context_material = 34;
  oneof question {
    BooleanQuestion question_boolean = 10;
    CategorizerQuestion question_categorizer = 11;
    CategorizerQuestion question_categorizer_multi = 12;
    HighlightTextQuestion question_highlight_text = 13;
    HotspotQuestion question_hotspot = 14;
    ChoiceQuestion question_multiple_choice = 15;
    ChoiceQuestion question_single_choice = 16;
    SorterQuestion question_sorter = 17;
    TextQuestion question_text = 18;
    FillInTheGapQuestion question_gap = 19;
    EssayQuestion question_essay = 30;
  }
  oneof solution {
    BooleanSolution solution_boolean = 20;
    CategorizerSolution solution_categorizer = 21;
    CategorizerSolution solution_categorizer_multiple = 33;
    HighlightTextSolution solution_highlight_text = 23;
    HotspotSolution solution_hotspot = 24;
    MultipleChoiceSolution solution_multiple_choice = 25;
    SingleChoiceSolution solution_single_choice = 26;
    SorterSolution solution_sorter = 27;
    TextSolution solution_text = 28;
    FillInTheGapSolution solution_gap = 29;
    EssaySolution solution_essay = 31;
  }
  string django_uuid = 100;
}

message GapEvaluation {
  reserved 1;
  bool is_correct = 2;
}

message HotspotPointEvaluation {
  bool is_correct = 1;
}

enum Correctness {
  CORRECT = 0;
  PARTIALLY_CORRECT = 1;
  WRONG = 2;
}

message Evaluation {
  reserved 1, 4;
  classtime.service.common.GradingPoint grading_points = 2; // Actual points given for the answer.
  classtime.service.common.GradingPoint manual_grading_points = 3; // Points manually set.
  classtime.service.common.GradingPoint automatic_grading_points = 7; // Points automatically computed.
  repeated GapEvaluation evaluation_gap = 5;
  string evaluation_explanation = 6;
  repeated HotspotPointEvaluation evaluation_hotspot = 8;
  Correctness correctness = 9;
}

message PartialEvaluation {
  reserved 2;
  // Key is the index of the gap (starting with "0").
  map<string, GapEvaluation> gap_evaluations = 1;
}

// Entity Nested under Participant
message Answer {
  reserved 2;
  classtime.entity.EntityRef question = 1;
  google.protobuf.Timestamp created_at = 3;
  classtime.service.common.GradingPoint bonus = 6;
  classtime.entity.EntityRef manual_evaluation_with_embedding = 7;
  bool is_auto_submitted = 8;
  oneof evaluation {
    PartialEvaluation partial_evaluation = 4;
    Evaluation full_evaluation = 5;
  }
  oneof answer {
    BooleanAnswer answer_boolean = 10;
    CategorizerAnswer answer_categorizer = 11;
    CategorizerAnswer answer_categorizer_multi = 12;
    HighlightTextAnswer answer_highlight_text = 13;
    HotspotAnswer answer_hotspot = 14;
    MultipleChoiceAnswer answer_multiple_choice = 15;
    SingleChoiceAnswer answer_single_choice = 16;
    SorterAnswer answer_sorter = 17;
    TextAnswer answer_text = 18;
    FillInTheGapAnswer answer_gap = 19;
    EssayAnswer answer_essay = 20;
  }
  string django_uuid = 100;
}

// Entity nested under SessionParticipant
message DraftAnswer {
  reserved 100, 101;
  classtime.entity.EntityRef question = 1;
  oneof answer {
    TextAnswer answer_text = 2;
    FillInTheGapAnswer answer_gap = 3;
    EssayAnswer answer_essay = 4;
    BooleanAnswer answer_boolean = 6;
    CategorizerAnswer answer_categorizer = 7;
    CategorizerAnswer answer_categorizer_multi = 8;
    HighlightTextAnswer answer_highlight_text = 9;
    HotspotAnswer answer_hotspot = 10;
    MultipleChoiceAnswer answer_multiple_choice = 11;
    SingleChoiceAnswer answer_single_choice = 12;
    SorterAnswer answer_sorter = 13;
  }
  string undo_history = 5; // Only for Essay.
}

message QuestionGroup {
  string title = 1;
  repeated classtime.entity.EntityRef questions = 2; // References SessionQuestion
  string question_set_id = 3; // It might not be set
}

message EvaluationMapEntry {
  reserved 4, 5;
  string answer_id = 1;
  classtime.service.question.api.Evaluation evaluation = 2;
  google.protobuf.Timestamp created_at = 3;
  classtime.service.common.GradingPoint bonus = 6;
}

message EvaluationMap {
  // key: Question ID
  map<string, EvaluationMapEntry> evaluations = 1;
}

message AnswerEmbedding {
  string model = 1;
  repeated float values = 2;
}

message ManualEvaluation {
  reserved 1, 2, 10, 11;

  message Evaluation {
    oneof evaluation {
      bool is_correct = 1;
      classtime.service.common.GradingPoint manual_grading_points = 2;
    }
  }

  bytes owner_question_content_hash = 3;
  classtime.entity.EntityRef owner_account_id_ref = 4; // owner of the session where ManualEvaluation was created
  // Hash of the canonical answer string
  // - for full answers: 'full:$canonical_answer_string'
  // - for blank gaps: 'blank-gap:$gap_index|$content'
  bytes canonical_answer_hash = 5;
  Evaluation evaluation = 6;

  message AnswerEmbeddingsInfo {
    reserved 8;
    repeated AnswerEmbedding embeddings = 7;
  }

  AnswerEmbeddingsInfo answer_embeddings_info = 9;
}
