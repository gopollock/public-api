syntax = "proto3";

package classtime.service.library.api;

import "common_messages.proto";
import "entity_store_messages.proto";
import "google/protobuf/struct.proto";
import "library_entities.proto";
import "question_entities.proto";

option java_multiple_files = true;
option java_outer_classname = "LibraryMessagesProto";
option java_package = "classtime.service.library.api";

message CreateFolderRequest {
  reserved 1;
  string parent_folder_id = 2;
  string title = 3;
}

message CreateFolderResponse {
  FolderInfo folder_info = 1;
}

message UpdateFolderRequest {
  string folder_id = 1;
  string title = 2;
}

message UpdateFolderResponse {
  FolderInfo folder_info = 1;
  repeated FolderInfo child_folders = 2;
  repeated QuestionSetInfo child_question_sets = 3;
}

message MoveFolderRequest {
  string folder_id = 1;
  string target_parent_folder_id = 2;
}

message MoveFolderResponse {
  FolderInfo folder_info = 1;
  repeated FolderInfo child_folders = 2;
  repeated QuestionSetInfo child_question_sets = 3;
}

message GetFolderRequest {
  string folder_id = 1;
}

message GetFolderResponse {
  FolderInfo folder_info = 1;
  repeated FolderInfo child_folders = 2;
  repeated QuestionSetInfo child_question_sets = 3;
}

message SetFolderStatusRequest {
  string folder_id = 1; // use for (de)archiving
  repeated string folder_ids = 2; // use for deleting
  EntityStatus status = 3;
}

message SetFolderStatusResponse {}

message GetQuestionSetRequest {
  oneof identifier {
    string question_set_id = 1;
    string question_set_secret_link = 2;
  }
}
message GetQuestionSetResponse {
  QuestionSetInfo question_set_info = 1;
}

message CreateQuestionSetRequest {
  string folder_id = 1;
  string title = 2;
}
message CreateQuestionSetResponse {
  QuestionSetInfo question_set_info = 1;
}

message UpdateQuestionSetRequest {
  string question_set_id = 1;
  string title = 2;
}

message UpdateQuestionSetResponse {
  QuestionSetInfo question_set_info = 1;
}

message SetSoloSessionRefRequest {
  string secret_id = 1;
  oneof solo_session_ref {
    classtime.entity.EntityRef anonymous_solo_session_ref = 2;
    classtime.entity.EntityRef authorized_solo_session_ref = 3;
  }
}

message SetSoloSessionRefResponse {}

message MoveQuestionsRequest {
  repeated string question_ids = 1;
  string target_question_set_id = 2;
}

message MoveQuestionsResponse {}

message MoveQuestionSetsRequest {
  repeated string question_set_id = 1;
  string target_parent_folder_id = 2;
}

message MoveQuestionSetsResponse {
  repeated string question_set_id = 1;
}

message SetQuestionSetsStatusRequest {
  repeated string question_set_ids = 1;
  EntityStatus status = 2;
}
message SetQuestionSetsStatusResponse {}

message SetQuestionsStatusRequest {
  repeated string question_ids = 1;
  EntityStatus status = 2;
  // When unarchiving questions, you need to set the target QuestionSet
  string target_question_set_id = 3;
}

message SetQuestionsStatusResponse {}

message CopyQuestionSetRequest {
  string question_set_id = 1;
  string target_parent_folder_id = 2;
}

message CopyQuestionSetResponse {}

message CopyQuestionRequest {
  string question_id = 1;
  string target_question_set_id = 2;
}

message CopyQuestionResponse {
  QuestionInfo question = 1;
}

message ChangeFolderCollaboratorsRequest {
  string folder_id = 1;
  string school_id = 2;
  // Note: classtime_ids
  repeated string added_account_ids = 3;
  repeated string removed_account_ids = 4;
  repeated string read_only_access_mode_ids = 5;
}

message ChangeFolderCollaboratorsResponse {
  reserved 1;
  // Note: classtime_ids
  repeated string collaborator_ids = 2;
}

message GetFolderCollaboratorsRequest {
  string folder_id = 1;
}

message GetFolderCollaboratorsResponse {
  repeated classtime.service.common.CollaboratorInfo collaborator_infos = 1;
  classtime.service.common.SchoolInfo school = 2;
  string organization_id = 3;
}

message ReorderQuestionsRequest {
  string question_set_id = 1;
  repeated string question_ids = 2;
}

message ReorderQuestionsResponse {}

message GetPlaylistDetailsRequest {
  repeated classtime.service.common.PlaylistEntry playlist = 1;
}

message GetPlaylistDetailsResponse {
  message PlaylistDetailsEntry {
    classtime.service.question.api.QuestionGroup question_group = 1;
    repeated classtime.service.question.api.Question questions = 2;
    string publisher_account_id = 3;
  }

  repeated PlaylistDetailsEntry playlist_details = 1;
}

message GetFolderQuestionSetsRequest {
  string folder_id = 1;
}

message GetFolderQuestionSetsResponse {
  repeated QuestionSetInfo question_sets = 1;
}

message LibraryChoice {
  bool is_correct = 1;
  int32 order = 2;
  google.protobuf.Struct content_draftjs = 3;
  string image = 4;
  string uuid = 5;
}

// Both Single and Multiple
message ChoiceLibraryQuestion {
  repeated LibraryChoice choices = 1;
}

message LibraryCategorizerCategory {
  google.protobuf.Struct content_draftjs = 1;
  string uuid = 2;
}

message LibraryCategorizerItem {
  google.protobuf.Struct content_draftjs = 1;
  string uuid = 2;
  repeated string category_uuids = 3;
}

// Both Categorizer and CategorizerMultiple
message CategorizerLibraryQuestion {
  repeated LibraryCategorizerItem items = 1;
  repeated LibraryCategorizerCategory categories = 2;
}

message BooleanLibraryQuestion {
  bool is_true_correct = 1;
}
message TextLibraryQuestion {}

message EssayLibraryQuestion {}

message SorterLibraryQuestion {
  repeated LibraryChoice choices = 1;
}

message LibraryClozeChoice {
  bool is_correct = 1;
  string content = 2;
}

message LibraryCloze {
  repeated LibraryClozeChoice cloze_choice = 1;
  /* referenced in [HighlightTextLibraryQuestion.template_content] */
  string template_id = 2;
}

message HighlightTextLibraryQuestion {
  /* contains plain context text with template ids reference to clozes (e.g. "[cloze_id_1] other plain text") */
  string template_content = 1;
  repeated LibraryCloze clozes = 2;
}

message HotspotLibraryQuestion {
  int32 width = 1;
  int32 height = 2;
  string image = 3;
  repeated classtime.service.question.api.Shape shapes = 4;
  bool require_all = 5;
}

message LibraryGapChoice {
  string content = 1;
  int32 index = 2;
  bool is_correct = 3;
  string parent_gap_template_id = 4;
}

message LibraryChoicesGap {
  repeated LibraryGapChoice choices = 1;
}

message LibraryBlankGap {
  string solution = 1;
}

message LibraryGap {
  /* referenced in [FillInTheGapLibraryQuestion.gap_template_content] */
  string gap_template_id = 1;
  oneof gap {
    LibraryBlankGap gap_blank = 2;
    LibraryChoicesGap gap_choices = 3;
  }
}

message FillInTheGapLibraryQuestion {
  /* contains plain context text with template ids reference to gaps (e.g. "[gap_id_1] other plain text") */
  string gap_template_content = 1;
  repeated LibraryGap gaps = 2;
}

message CreateLegacyQuestionRequest {
  string question_set_id = 1;
  string title = 2;
  float weight = 3;
  google.protobuf.Struct description_draftjs = 4;
  google.protobuf.Struct explanation_draftjs = 5;
  string image = 6;
  string audio = 7;
  string video = 8;
  repeated string tag_ids = 9;
  bool is_poll = 10;
  classtime.service.question.api.ContextMaterial context_material = 22;

  oneof question {
    ChoiceLibraryQuestion question_single_choice = 11;
    ChoiceLibraryQuestion question_multiple_choice = 12;
    BooleanLibraryQuestion question_boolean = 13;
    TextLibraryQuestion question_text = 14;
    EssayLibraryQuestion question_essay = 15;
    SorterLibraryQuestion question_sorter = 16;
    CategorizerLibraryQuestion question_categorizer = 17;
    CategorizerLibraryQuestion question_categorizer_multi = 18;
    HighlightTextLibraryQuestion question_highlight_text = 19;
    HotspotLibraryQuestion question_hotspot = 20;
    FillInTheGapLibraryQuestion question_gap = 21;
  }
}

message CreateLibraryQuestionRequest {
  string question_set_id = 1;
  classtime.service.question.api.Question question = 2;
}

message CreateQuestionResponse {
  string id = 1;
}

message GetQuestionRequest {
  string question_id = 1;
}

message GetQuestionResponse {
  classtime.service.question.api.Question question = 1;
}
